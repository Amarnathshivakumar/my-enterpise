generator client {
  provider = "prisma-client-js"
  output   = "../prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model entities {
  id_entity   Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  type        String    @db.VarChar(100)
  description String?   @db.VarChar(255)
  number      String?   @db.VarChar(50)
  size        String?   @db.VarChar(50)
  logo_url    String?   @db.VarChar(500)
  active      Int       @default(1)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  spots       spots[]
  users       users[]
}

model profiles {
  id_profile Int       @id @default(autoincrement())
  first_name String?   @db.VarChar(150)
  last_name  String?   @db.VarChar(150)
  phone      String?   @db.VarChar(50)
  avatar_url String?   @db.VarChar(500)
  bio        String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users[]
}

model roles {
  id_role     Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  users       users[]
}

model spots {
  id_spot     Int       @id @default(autoincrement())
  entity_id   Int
  name        String    @db.VarChar(200)
  description String?   @db.VarChar(255)
  active      Int       @default(1)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  entities    entities  @relation(fields: [entity_id], references: [id_entity], onDelete: Cascade)
  users       users[]

  @@index([entity_id])
}

model tokens {
  id_token     Int       @id @default(autoincrement())
  user_id      Int
  r_token      String    @db.VarChar(512)
  access_token String?   @db.VarChar(512)
  exec_token   String?   @db.VarChar(512)
  revoked      Int       @default(0)
  expires_at   DateTime?
  status       String?   @db.VarChar(50)
  active       Int       @default(1)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@index([r_token(length: 191)])
  @@index([user_id])
}

model users {
  id_user       Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role_id       Int
  entity_id     Int
  spot_id       Int?
  profile_id    Int?
  last_login_at DateTime?
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  tokens        tokens[]
  logs          logs[] // <-- back-relation hacia logs
  entities      entities  @relation(fields: [entity_id], references: [id_entity], onDelete: Cascade)
  profiles      profiles? @relation(fields: [profile_id], references: [id_profile])
  roles         roles     @relation(fields: [role_id], references: [id_role])
  spots         spots?    @relation(fields: [spot_id], references: [id_spot])
}

model logs {
  id_log      Int       @id @default(autoincrement())
  user_id     Int?
  action      String    @db.VarChar(50)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  users       users?    @relation(fields: [user_id], references: [id_user], onDelete: SetNull)
}
